#################################################

# ФАЙЛ НАСТРОЕК ПРОГРАММЫ
# После изменения настроек программу нужно перезапустить

#################################################


# ОСНОВНЫЕ ПАРАМЕТРЫ
params =    {
            'window_size':    (1024, 576),      # начальный размер окна
            'channels':       [2],              # отображаемые каналы, [1], [2], [1,2] или [2,1]; для режима XY - [2/1] или [1/2]
            'refresh_ms':     1000,             # интервал обновления, миллисекунд
            'grid_values':    True,             # отображать значения на основных линиях сетки
            'tray_icon_draw': False,            # обновлять иконку в скрытом состоянии, True или False; хорошая функция, но бесполезная
            'log':            True,             # вести запись усреднённых по avg_by (отображаемых в надписи) данных в .log-файл
            'read_samples':   50,               # количество сэмплов, читаемых с устройства за раз (размер пачки)
            }

# ПАРАМЕТРЫ ОТОБРАЖЕНИЯ КАНАЛОВ
channel_1 = {
            'function':       lambda x: x,      # функция пересчёта значений (0<=x<=1)
            'f_range':        [0.8, 0.6],       # диапазон отображаемых значений функции
            'grids':          [1/10, 1/100],    # линии сетки
            'vline_s':        60.0,             # интервал между вертикальными линиями сетки, секунд, 0 - без вертикальных линий

            'draw_by':        50,               # количество сэмплов на точку
            'latest_n':       1,                # отрисовываемое за раз количество точек, при наличии данных

            'color_rgb':      (255,0,128),      # цвет канала (R, G, B)
            'dots':           False,            # отображение точками (True) или сплошной заливкой (False)

            'text_val':       True,             # отображение усреднённого по avg_by сэмплам значения (надписи)
            'avg_by':         300,              # количество сэмплов для усреднения значения
            'digits':         6,                # знаков после запятой в надписи (на записываемые в файл данные не влияет)
            'text_before':    '10K: ',          # текст до значения, пустые кавычки (одинарные '' или двойные "") - без текста
            'text_after':     '',               # текст после значения, пустые кавычки (одинарные '' или двойные "") - без текста

            'draw_avg':       False,            # отрисовка по avg_by вместо draw_by; линия получается более инертная
            }

channel_2 = {
            'function':       lambda x: (x * 2.2792049120597655 + 0.0154873618) * 100,  # функция пересчёта значений (0<=x<=1)
            'f_range':        [20, 30],         # диапазон отображаемых значений функции
            'grids':          [1, 0.5],         # линии сетки
            'vline_s':        60.0,             # интервал между вертикальными линиями сетки, секунд, 0 - без вертикальных линий

            'draw_by':        10,               # количество сэмплов на точку
            'latest_n':       1,                # отрисовываемое за раз количество точек, при наличии данных

            'color_rgb':      (0,220,255),      # цвет канала (R, G, B)
            'dots':           False,            # отображение точками (True) или сплошной заливкой (False)

            'text_val':       True,             # отображение усреднённого по avg_by сэмплам значения (надписи)
            'avg_by':         300,              # количество сэмплов для усреднения значения
            'digits':         2,                # знаков после запятой в надписи (на записываемые в файл данные не влияет)
            'text_before':    'LM35: ',         # текст до значения, пустые кавычки (одинарные '' или двойные "") - без текста
            'text_after':     ' °C',            # текст после значения, пустые кавычки (одинарные '' или двойные "") - без текста

            'draw_avg':       True,             # отрисовка по avg_by вместо draw_by; линия получается более инертная
            }


#################################################

#   'Диапазон отображаемых значений функции' не должен быть равен нулю, т.е. нельзя [1,1], но можно [-2,0].
#   Если диапазон отрицательный, то есть первая граница больше второй (например [2,1]), то ось переварачивается,
#   но полосочки всё равно будут рисоваться в сторону нижнего края окна.

#   Режим 'отрисовка по avg_by вместо draw_by' отрисовывает значения отображаемые в надписи.
#   В этом режиме параметры draw_by и latest_n игнорируются.
#   Если режим установлен хотя бы в одном из каналов, то в режиме XY оба канала будут отрисованы по avg_by.

#   Строки с параметрами можно тасовать. Все параметры обязательны.

#################################################


"""

ИКС (x)
    x = (измеренное значение) * 2.5 / 2557,
            так как (измеренное значение) лежит в пределах от 0 до 1023 (для 10-ти битного АЦП),
            то значения х будут в пределах от 0 до 1.

    Можно было бы просто делить на 1023, но в прошивке уже есть умножение на 2.5,
    а так как всегда есть ошибка АЦП, то (измеренное значение) * 2.5 не равно
    измеренному значению в милливольтах, хоть опорное напряжение АЦП и равно 2.56 вольта.


ПРИМЕРЫ ФУНКЦИЙ

lambda x:  x            # - значение функции равно измеренному и приведённому к 1 значению - от 0 до 1

lambda x:  x**2         # - при напряжении на входе равном 1 вольт (x = V*1000 / 2557 = 1000/2557 = 0.391)
                        #   значение функции будет равно (0.391 в квадрате) = 0.1528

lambda x:  x * 2557 / 2.5
                        # - если округлить, то значение функции будет равно значению АЦП контроллера
                        #   округлять можно используя функцию int() или round(), например
lambda x:  round(x * 2557 / 2.5)

lambda x:  x*2.2792049120597655 + 0.0154873618
                        # - примерная, подобранная вручную линейная регрессия для определения
                        #   истинного напряжения на входе; лучше уточнить

lambda x:  -0.046 * (1-x)**2 * x + 5.152 * (1-x) * x**2 + 0.57778 * x**3
                        # - полином третьей степени


ЗАЧЕМ НУЖНА "lambda x:" ?

    Так оформляются безымянные функции в питоне - обычно это коротенькие функции, имя которых не важно.
    Если оформить лямбду из последнего примера как обычную функцию, то она будет выглядеть так:

    def MyPolynome(x):
        return -0.046 * (1-x)**2 * x + 5.152 * (1-x) * x**2 + 0.57778 * x**3

    Теперь у функции появилось имя: MyPolynome, так что если мы ранее (до настроек) обзавелись такой функцией,
    то в настройках, вместо "lambda x: -0.046 * ... и т.д." можно просто записать имя функции: MyPolynome.

    Подобные функции могут быть достаточно сложными и длинными. Например, таким образом можно вставить
    функцию, вычисляющую значение температуры по напряжению на термопаре или по сопротивлению платинового
    терморезистора. Подобные функции хорошо описаны в ГОСТ-ах и инструкциях к термодатчикам.

    Если поискать питоновские скрипты в "кошаре", то можно найти готовые функции для платинового термосопротивления
    и термопары K-типа.

"""

#################################################


if __name__ == "__main__":
    import os, sys
    os.execvp("notepad.exe", [' ',sys.argv[0]])


#################################################
